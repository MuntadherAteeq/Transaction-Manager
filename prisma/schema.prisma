// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("DATABASE_URL")
//   directUrl = env("DIRECT_URL")
// }

model Account {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  records   Record[]
  role      String
  name      String
  image     String?
  createdAt DateTime?
  updatedAt DateTime?
  Session   Session[]

  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  account   Account  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  adminId   String?

  @@index([userId])
}

model Record {
  id       String   @id @default(uuid())
  category String?
  name     String?  @default("Untitled")
  date     DateTime @default(now())
  image    String?
  email    String?
  phone    String?
  address  String?
  tables   Table[]
  desc     String?
  account  Account? @relation(fields: [userId], references: [id])
  userId   String?
}

model Table {
  id           Int           @id @default(autoincrement())
  recordId     String
  isCompleted  Boolean       @default(false)
  transactions Transaction[]
  record       Record        @relation(fields: [recordId], references: [id])
}

model Transaction {
  id          Int      @id @default(autoincrement())
  tableId     Int
  amount      Int      @default(0)
  type        String
  description String?
  date        DateTime @default(now())
  qty         Int      @default(1)
  table       Table    @relation(fields: [tableId], references: [id])
}

model JobCard {
  id              Int      @id @default(autoincrement())
  date            DateTime
  km              Int
  operator        String
  department      String
  description     String
  type            String?
  parts           Part[]
  totalAmount     Float
  nextServiceDate DateTime
  nextServiceKm   Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Foreign key relationship to Vehicle
  vehicleId Int

  @@index([vehicleId])
  @@index([date])
}

model Part {
  id          Int      @id @default(autoincrement())
  partCode    String
  description String
  quantity    Int
  rate        Float
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign key relationship to VehicleService
  serviceId Int
  JobCard   JobCard? @relation(fields: [jobCardId], references: [id])
  jobCardId Int?

  @@index([serviceId])
  @@index([partCode])
}
