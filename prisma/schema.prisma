// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("DATABASE_URL")
//   directUrl = env("DIRECT_URL")
// }

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String?
  sessions      Session[]
  records       Record[]
  name          String
  emailVerified Boolean
  image         String?
  createdAt     DateTime?
  updatedAt     DateTime?
  accounts      Account[]

  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?

  @@unique([token])
  @@map("session")
}

model Record {
  id       String   @id @default(uuid())
  category String?
  name     String?  @default("Untitled")
  date     DateTime @default(now())
  email    String?
  phone    String?
  address  String?
  tables   Table[]
  desc     String?
  User     User?    @relation(fields: [userId], references: [id])
  userId   String?
}

model Table {
  id           Int           @id @default(autoincrement())
  recordId     String
  isCompleted  Boolean       @default(false)
  transactions Transaction[]
  record       Record        @relation(fields: [recordId], references: [id])
}

model Transaction {
  id          Int      @id @default(autoincrement())
  tableId     Int
  amount      Int      @default(0)
  type        String
  description String?
  date        DateTime @default(now())
  qty         Int      @default(1)
  table       Table    @relation(fields: [tableId], references: [id])
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
